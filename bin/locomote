#!/usr/bin/env node

const Usage = `
Usage:

    locomote <command> <options...> <args...>

Where:

    <command> one of the supported or configured commands (see below).

    <options...> is any of the following:

        -h | --help         Print this message and exit.
        -v | --version      Print the version number and exit.
        -E<name>=<value>    Specify a build enviroment name/value.
                            The option can be used multiple times to specify
                            multiple values.
        --config <file>     Specify a configuration file. By default, the
                            command will attempt to load configuration from
                            a file named locomote.build-config.js

    <args...> are positional arguments defined by the command being called.

The standard build commands are:

* serve: Start the development server.

  The dev server will build and serve source code in the current directory.

  Content is built locally and output by default to _site under the current
  location (see 'build' command below).

  Content is served from a local HTTP server which also provides Locomote's
  query API endpoints, and by default listens on port 3000.

  The server will automatically rebuild and serve content as it is modified.

  See locomote-serve for full command line options.

* build: Build source code in the current directory and output to _site.

  The default configuration performs a Heckle static site build followed
  by a webpack build. 

  The default source and target locations can be modifed from the command line:

        locomote build <source> <target>

* deploy: Build the current contents of the 'master' branch and deploy the
  result to the 'test' branch.

  This command performs the same build operations as the 'build' command, but
  works with the contents of the respective git branches rather than the
  filesystem.

  The build is done in a temporary location on the local file system and the
  result is automatically pushed to the remote server.

  The source and target branches can be modified from the command line:

        locomote deploy <source> <target>

* release: Merge the current contents of the 'test' branch into the 'public'
  branch.

  This command can be used to publish previously built content.

  The source and target branches can be modified from the command line:

        locomote release <source> <target>

`;

const Path = require('path');

// Parse the command line.
const argv = require('minimist')( process.argv.slice( 2 ) );

const DefaultConfigFile = 'locomote.build.js';

// Extract command line vars.
const {
    // Print version
    v, version,
    // Print usage
    h, help,
    // Specify config file(s)
    config: configFile = DefaultConfigFile,
    // Positional args.
    _: [ cname, ...args ]
} = argv;

// Print version?
if( v || version ) {
    printVersion();
    process.exit( 0 );
}

// Print usage?
if( h || help ) {
    printUsage();
    process.exit( 0 );
}

// Command?
if( !cname ) {
    console.log('Build command required');
    printUsage();
    process.exit( 0 );
}

// Default configuration.
let config = {
    env: {          // Build environment.
        workspace: '.'
    },
    server: require('../lib/server/default-config'),
    commands: {}    // Additional build commands.
};

// Load configuration file(s).
[].concat( configFile ) // Ensure config is an array.
.forEach( file => {
    console.log('Loading configuration from %s...', file );
    // NOTE that file not found won't be reported if loading from default config file.
    config = loadConfig( config, file, file === DefaultConfigFile  );
});

// Load command definitions.
const commandDefs = [
    require('../conf/std-build.json'),      // Standard build commands.
    require('../lib/server/build-conf'),    // Dev server build commands.
    config.commands                         // Configuration specified commands.
];

// Extract environment assignments from the command line vars.
// The way minimalist lib handles args in -Ename=value format isn't in any way
// useful to us here, so instead process the raw args directly.
const { env } = config;
process.argv.forEach( arg => {
    if( arg.startsWith('-E') ) {
        // Environment vars can be either in name=value format, or supplied
        // as name only in which case the var assigned 'true'.
        const [ name, value = true ] = arg.slice( 2 ).split('=');
        env[name] = value;
    }
});
// Add the server configuration to the environment.
env.server = { config: config.server };

// Run the command; the full command name is formed by prefixing the supplied
// name with 'cli:'.
const { run } = require('../lib');
run('cli:'+cname, env, args, commandDefs )
    .then( () => console.log('Done') )
    .catch( e => console.error( e.message || e ) );

function printVersion() {
    const { version } = require('../package.json');
    console.log('Version: %s', version );
}

function printUsage() {
    console.log('Locomote build tools');
    printVersion();
    console.log( Usage );
}

/**
 * Load configuration from a file.
 * The function performs a one-deep merge of configuration properties, i.e.
 * if a top-level property's value is an object, then that value will be
 * merged across all available configurations.
 */
function loadConfig( baseConfig, file, ignoreNotFound = false ) {
    try {
        const config = require( Path.resolve( file ) );
        // Iterate over keys in loaded config.
        for( const key in config ) {
            const value = config[key];
            const baseValue = baseConfig[key];
            switch( typeof baseValue ) {
                case 'object':
                    // If base value and loaded value are both objects then
                    // merge together, giving precedence to the loaded value.
                    if( typeof value === 'object' ) {
                        baseConfig[key] = Object.assign( baseValue, value );
                        break;
                    }
                case 'undefined':
                default:
                    // By default, copy the loaded value over any in-place value.
                    baseConfig[key] = value;
                    break;
            }
        }
    }
    catch( e ) {
        if( !(e.code === 'MODULE_NOT_FOUND' && ignoreNotFound) ) {
            throw e;
        }
    }
    return baseConfig;
}
